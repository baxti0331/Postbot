"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from bot import TelegramBot

from database import Database
from config import SCHEDULER_CHECK_INTERVAL

logger = logging.getLogger(__name__)

class MessageScheduler:
    def __init__(self, bot: 'TelegramBot'):
        self.bot = bot
        self.database = Database()
        self.running = False
        self._task = None
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.running:
            return
        
        self.running = True
        import threading
        import time
        
        def scheduler_loop():
            while self.running:
                try:
                    self._check_due_posts_sync()
                    time.sleep(SCHEDULER_CHECK_INTERVAL)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                    time.sleep(SCHEDULER_CHECK_INTERVAL)
        
        self._thread = threading.Thread(target=scheduler_loop, daemon=True)
        self._thread.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                await self._check_due_posts()
                await asyncio.sleep(SCHEDULER_CHECK_INTERVAL)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(SCHEDULER_CHECK_INTERVAL)
    
    def _check_due_posts_sync(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–æ–≤"""
        due_posts = self.database.get_due_posts()
        
        for post in due_posts:
            try:
                self._send_scheduled_post_sync(post)
                import asyncio
                asyncio.run(self.database.remove_scheduled_post(post["id"]))
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç {post['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ {post['id']}: {e}")
    
    def _send_scheduled_post_sync(self, post: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        user_id = post["user_id"]
        message = post["message"]
        channels = post["channels"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_channels = self.database.get_user_channels(user_id)
        
        success_count = 0
        error_count = 0
        errors = []
        
        for channel_id in channels:
            if channel_id not in user_channels:
                continue
            
            try:
                self.bot.bot.send_message(
                    chat_id=channel_id,
                    text=message,
                    parse_mode='HTML'
                )
                success_count += 1
            except Exception as e:
                error_count += 1
                channel_title = user_channels.get(channel_id, {}).get('title', channel_id)
                errors.append(f"‚ùå {channel_title}: {str(e)}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_message = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        result_message += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        result_message += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        
        if errors:
            result_message += f"\n–û—à–∏–±–∫–∏:\n" + "\n".join(errors[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
        
        try:
            self.bot.bot.send_message(
                chat_id=user_id,
                text=result_message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
